# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from . import util
from .agent import Agent


class DeviceValueQuery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, device_id: int=None, agent: Agent=None, labels: List[str]=None):  # noqa: E501
        """DeviceValueQuery - a model defined in Swagger

        :param device_id: The device_id of this DeviceValueQuery.  # noqa: E501
        :type device_id: int
        :param agent: The agent of this DeviceValueQuery.  # noqa: E501
        :type agent: Agent
        :param labels: The labels of this DeviceValueQuery.  # noqa: E501
        :type labels: List[str]
        """
        self.swagger_types = {
            'device_id': int,
            'agent': Agent,
            'labels': List[str]
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'agent': 'agent',
            'labels': 'labels'
        }

        self._device_id = device_id
        self._agent = agent
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceValueQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceValueQuery of this DeviceValueQuery.  # noqa: E501
        :rtype: DeviceValueQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> int:
        """Gets the device_id of this DeviceValueQuery.


        :return: The device_id of this DeviceValueQuery.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: int):
        """Sets the device_id of this DeviceValueQuery.


        :param device_id: The device_id of this DeviceValueQuery.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def agent(self) -> Agent:
        """Gets the agent of this DeviceValueQuery.


        :return: The agent of this DeviceValueQuery.
        :rtype: Agent
        """
        return self._agent

    @agent.setter
    def agent(self, agent: Agent):
        """Sets the agent of this DeviceValueQuery.


        :param agent: The agent of this DeviceValueQuery.
        :type agent: Agent
        """

        self._agent = agent

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this DeviceValueQuery.


        :return: The labels of this DeviceValueQuery.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this DeviceValueQuery.


        :param labels: The labels of this DeviceValueQuery.
        :type labels: List[str]
        """

        self._labels = labels
