# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from . import util
from .action import Action


class TaskDescription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str = None, action: Action = None, delay: int = None, interval: int = None):  # noqa: E501
        """TaskDescription - a model defined in Swagger

        :param type: The type of this TaskDescription.  # noqa: E501
        :type type: str
        :param action: The action of this TaskDescription.  # noqa: E501
        :type action: Action
        :param delay: The delay of this TaskDescription.  # noqa: E501
        :type delay: int
        :param interval: The interval of this TaskDescription.  # noqa: E501
        :type interval: int
        """
        self.swagger_types = {
            'type': str,
            'action': Action,
            'delay': int,
            'interval': int
        }

        self.attribute_map = {
            'type': 'type',
            'action': 'action',
            'delay': 'delay',
            'interval': 'interval'
        }

        self._type = type
        self._action = action
        self._delay = delay
        self._interval = interval

    @classmethod
    def from_dict(cls, dikt) -> 'TaskDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskDescription of this TaskDescription.  # noqa: E501
        :rtype: TaskDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this TaskDescription.


        :return: The type of this TaskDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TaskDescription.


        :param type: The type of this TaskDescription.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def action(self) -> Action:
        """Gets the action of this TaskDescription.


        :return: The action of this TaskDescription.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action: Action):
        """Sets the action of this TaskDescription.


        :param action: The action of this TaskDescription.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def delay(self) -> int:
        """Gets the delay of this TaskDescription.


        :return: The delay of this TaskDescription.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay: int):
        """Sets the delay of this TaskDescription.


        :param delay: The delay of this TaskDescription.
        :type delay: int
        """

        self._delay = delay

    @property
    def interval(self) -> int:
        """Gets the interval of this TaskDescription.


        :return: The interval of this TaskDescription.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval: int):
        """Sets the interval of this TaskDescription.


        :param interval: The interval of this TaskDescription.
        :type interval: int
        """

        self._interval = interval
